Data Access-aware BalLooning

Requirements
============

There are some memory-overcommit VM host systems relying on FPR.  For
efficiency, the host works in 2MiB granularity, which is the default of FPR.
Hence 2 MiB gran defragmentation is important.  For maximizing the efficiency,
the host wants the guests to run proactive reclamation and compaction to
generate more 2 MiB-contig free memory.  For further saving struct page
overhead, the host further wants the guests to place struct page objects on
memory block for the objects using memmap_on_mem, proactively hot-remove memory
blocks, and reports the hot-removed memory block as free to the host using FPR.

Problems
========

To get 2 MiB gran free pages, proactive compactions can be used.   However,
compacted free pages can fragmented at any time.  Any of reported pages can be
allocated to users at any time, and it asks the host to return whole 2 MiB
memory.

Memory hot-remova works in memory block granularity.  It takes quite a time to
migrate pages out of the block.

There is no memory hot-removal user interface for the guest, and FPR doesn't
report hot-removed memory to the host.

Solution
========

Summary:
- Need proactive reclamation
- Need proactive compaction that doesn't fragmented arbitrarily
- Need memory block hot-removal in timely and reliable manner
- Need to report hot-removed memory block to the host

Modify FPR to report hot-removed memory.

Make DAMON to compact/isolate 2MiB cold contiguous pages and hot-remove
isolated memory blocks, if free memory is sufficient.

Make DAMON to hot-add memory blocks and proactively reclaim cold pages, if free
memory is insufficient.



Basic idea: Replace compaction with cold-pages first isolation

isolation/report
reclamation
hot-remove

hot-unremove
stop-reclamation
unisolation

Isolation is better than reclamation.

Usable memory: memory that usable by users (except isolated memory and
allocated memory)
Free memory: free memory
Free memory ratio: Free memory / Usable memory

1. If the free memory ratio is more than 50% and the free memory is more than 2
memory blocks size, start access-aware isolation of the last online block.
2. If isolation results in free memory ratio less than 30% or less than 2
   memory blocks, stop isolation, start DARC and unisolation.

while True:
	if free_mem_ratio > 0.5 and freem_mem_bytes > 2 * sz_memblock:
		stop_periodic_unisolation(last_online_block)
		stop_proactive_reclamation()
		start_access_aware_isolation(last_online_block)
	if entire_isolated(last_oneline_block)
		hot_remove(last_online_block)
	if free_mem_ratio < 0.3 or free_mem_bytes < 1.5 * sz_memblock:
		stop_access_aware_isolation(last_online_block)
		start_periodic_unisolation(last_online_block)
		start_proactive_reclamation()
		if entire_unisolated(last_oneline_block):
			hot-add(last_hotremoved_block)
			last_online_block = last_hotremoved_block
			last_hotremoved_block = min(last_online_block + 1, last_block)

3. 

1. If free memory ratio is less than 30%, run DARC until it be 50%.
2. If free memory ratio is more than 50% and free memory is more than 2 memory
blocks size, set the last memory block as hot-remove target.
2-1. Isolate memory in the hot-remove target block in 2MiB granularity, cold
2MiB contig pages first (use DAMOS).  Report isolated memory to the host as
free.
2-2. If all memory of the block is isolated, hot-remove with 'struct page'
objects for the region and further report the 'struct page' object memory as
free to the host.

3. 

If the system has more than B blocks amount of free memory, set a block as hot-remove target
If less than Y % free memory 

DARC for increasing free memory
Isolation for freezing compaction
Hot-remove for removing struct page

Opposite for memory pressure

Assuming 2 pages granularity isolation, 8 pages per block, 1 page on each block
for 'struct page'


AFAFAFAF AFAFAFAF AFAFAFAF AFAFAFAF

AFAFAFAF AFAFAFAF AFAFAFAF AFAFAAFF
AFAFAFAF AFAFAFAF AFAFAFAF AFAFAAII

AFAFAFAF AFAFAFAF AFAFAFAF AAAAFFII

A: Allocated, F: Freed, I: Isolated, R: Removed
