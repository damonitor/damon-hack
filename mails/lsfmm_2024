From: SeongJae Park <sj@kernel.org>
To: lsf-pc@lists.linux-foundation.org
Cc: damon@lists.linux.dev
Cc: linux-mm@kvack.org
Cc: linux-kernel@vger.kernel.org
Cc: sj@kernel.org
Subject: [LSF/MM/BPF TOPIC] DAMON Updates and Plans: DAMOS Self-tuning and Access/Contiguity-aware Memory Auto-scaling

Hi all,


Thanks to the discussions and feedback we received last year from the
LSF/MM/BPF 2023's DAMON updates and future plans session[1], DAMON made many
advances and yet more future plans.  I'd like to again share/discuss the
followup changes and status we made so far after the last year's session, and
the future development plans in the LSF/MM/BPF 2024.

Among the detailed topics, most important topics that I'd like to share and
discuss are below.

User Aims-oriented DAMOS Self-tuning
------------------------------------

I shared "feedback-based quota auto tuning" as the top priority item for 2023
on last year's session.  Fortunately it made some progress.  As of this
writing, the feedback loop algorithm, user feedback interface, and integration
of the two parts are implemented and merged in the mm tree.  By the time of
LSF/MM/BPF 2024, hopefully the remaining part of the initial idea, specifically
making DAMON feeds itself, will be implemented and merged in the mm tree.

I'd like to share the implementation detail and discuss about remaining rooms
for improvements and find future extension opportunities including tiered
memory management and general NUMA balancing.  Particularly the tiered memory
management could be the main topic for the future opportunity.  We shared a
detailed RFC idea[2] of it based on the self-tuning a couple of months ago.
Recently SK hynix has also adopted DAMON for their CXL-based tiered memory
management solution[3].  Updates on the ideas, collaboration results, and
hopefully early proof-of-concepts level implementation maybe shared on the
session.

Access/Contiguity-aware Memory Auto-scaling
-------------------------------------------

This is a new idea which was not discussed in last year's LSF/MM/BPF.  The idea
is for improving free pages reporting-based memory over-subscribed VM systems.
Specifically, it will steal guest memory based on access pattern in
contiguity-aware manner and report those to the host.  Further, it will
pseudo-hotunplug completely stolen memory blocks to reduce 'struct page'
overhead.  Expected benefit is simplification of the guest's kernel control and
more reliable/successful management of host-reusable pages.  More detailed
idea[4] has shared before.

Because it is still in pure idea level, no many progress until LSF/MM/BPF is
expected.  This item would be primarily for the future plans part.  That said,
hopefully early proof-of-concepts level impelmentation or some test results
will be shared.  Since this is expected to be more for future plans than status
update, I hope to have more discussions for getting design level concerns and
possible collaboration chances.

Misc
----

If time allows, I would be able to cover more followups for items that I shared
as the future plans, and the feedback/questions I received from the last year's
session.

- Merging DAMON user-space tool in the tree
- Write-only monitoring
- THP memory footprint reduction
- DAMON-based working set size report
- DAMON_RECLAIM control via virtio-balloon with free pages reporting
- documentation
- In production DAMON usages

[1] https://lwn.net/Articles/931769/
[2] https://lore.kernel.org/damon/20231112195602.61525-1-sj@kernel.org/
[3] https://github.com/skhynix/hmsdk/releases/tag/hmsdk-v2.0
[4] https://lore.kernel.org/damon/20231112195114.61474-1-sj@kernel.org/


Thanks,
SJ
