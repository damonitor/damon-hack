From 101192cedf028ef2af815289ba6b9c54911bd107 Mon Sep 17 00:00:00 2001
From: SeongJae Park <sj@kernel.org>
Date: Thu, 13 Jun 2024 18:22:05 -0700
Subject: [PATCH] Revert "kmsan: support SLAB_POISON"

This reverts commit 3388b341fe8373b9de322c6a5815c1d416719c12.

Temporal revert for keeping build test pass.

Signed-off-by: SeongJae Park <sj@kernel.org>
---
 mm/kmsan/hooks.c |  2 +-
 mm/slub.c        | 13 ++++---------
 2 files changed, 5 insertions(+), 10 deletions(-)

diff --git a/mm/kmsan/hooks.c b/mm/kmsan/hooks.c
index 26d86dfdc819..267d0afa2e8b 100644
--- a/mm/kmsan/hooks.c
+++ b/mm/kmsan/hooks.c
@@ -74,7 +74,7 @@ void kmsan_slab_free(struct kmem_cache *s, void *object)
 		return;
 
 	/* RCU slabs could be legally used after free within the RCU period */
-	if (unlikely(s->flags & SLAB_TYPESAFE_BY_RCU))
+	if (unlikely(s->flags & (SLAB_TYPESAFE_BY_RCU | SLAB_POISON)))
 		return;
 	/*
 	 * If there's a constructor, freed memory must remain in the same state
diff --git a/mm/slub.c b/mm/slub.c
index 11d42bc79910..9471ba788956 100644
--- a/mm/slub.c
+++ b/mm/slub.c
@@ -1141,12 +1141,7 @@ static void init_object(struct kmem_cache *s, void *object, u8 val)
 	unsigned int poison_size = s->object_size;
 
 	if (s->flags & SLAB_RED_ZONE) {
-		/*
-		 * Use __memset() here and below in order to avoid overwriting
-		 * the KMSAN shadow. Keeping the shadow makes it possible to
-		 * distinguish uninit-value from use-after-free.
-		 */
-		__memset(p - s->red_left_pad, val, s->red_left_pad);
+		memset(p - s->red_left_pad, val, s->red_left_pad);
 
 		if (slub_debug_orig_size(s) && val == SLUB_RED_ACTIVE) {
 			/*
@@ -1159,12 +1154,12 @@ static void init_object(struct kmem_cache *s, void *object, u8 val)
 	}
 
 	if (s->flags & __OBJECT_POISON) {
-		__memset(p, POISON_FREE, poison_size - 1);
-		__memset(p + poison_size - 1, POISON_END, 1);
+		memset(p, POISON_FREE, poison_size - 1);
+		p[poison_size - 1] = POISON_END;
 	}
 
 	if (s->flags & SLAB_RED_ZONE)
-		__memset(p + poison_size, val, s->inuse - poison_size);
+		memset(p + poison_size, val, s->inuse - poison_size);
 }
 
 static void restore_bytes(struct kmem_cache *s, char *message, u8 data,
-- 
2.39.2

