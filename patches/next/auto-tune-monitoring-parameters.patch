From: SeongJae Park <sj@kernel.org>
Date: Mon, 20 Jan 2025 13:43:38 -0800
Subject: [PATCH] ==== auto-tune monitoring parameters ====

mm/damon: auto-tune monitoring intervals aiming an amount of accesses

DAMON requires time-consuming and repetitive aggregation interval tuning
for each worklaods and systems.  Introduce a feature for automate the
tuning based on observed amount of access events.

Background: Access Frequency Monitoring and Aggregation Interval
================================================================

DAMON checks if each memory element (damon_region) is accessed or not
for every user-specified time interval called 'sampling interval'.  It
aggregates the check intervals on per-element counter called
'nr_accesses'.  DAMON users can read the counters to get the access
temperature of a given element.  The counters are reset for every
another user-specified time interval called 'aggregation interval'.

This can illustrated as DAMON generates monitoring results snapshot with
access eventss that happened within each 'aggregation interval'.  This
implies the aggregation interval is important for the quality of the
snapshots.  If it is too short, the amount of access events that
happened within the time interval is small, so each snapshot will show
no many interesting things but just a cold and dark world.  If it is too
long, the snapshot might have many interesting things, but important
events are already happened when the snapshot is ready to be shown.  As
a result, proactive access-aware operation or monitoring
self-optimizations such as adaptive regions adjustment cannot be made in
a timely manner.

Problem: Time Consuming and Repetitive Tuning
=============================================

The appropriate length of the aggregation interval depends on how
frequently the system and workloads are making access events that DAMON
can observe.  Hence, users have to tune the interval with excessive
amount of tests with the target system and workloads.  If the system and
workloads are changed, the tuning should be done again.  If the
characteristic of the workloads is dynamic, it becomes more challenging.
It is therefore time-consuming and repetitive.

The tuning challenge mainly stems from the wrong question.  It is asking
users how the mechanism should work to achieve good quality monitoring
results, which is what users want.  To make the right answer, users need
to fully understand DAMON's mechanism, and even the characteristics of
their workloads and systems.  Users shouldn't be asked to understand and
tune the mechanism but just specify what they want.  Understanding the
characteristics of the workloads and system is what DAMON is supposed to
do, not what users are supposed to.

Design: Aim-oriented Feedback-driven Auto-Tuning
================================================

Fortunately, the optimum length of the aggregation interval can be
inferred based on given workloads.  If the current snapshots are showing
no much intresting information, in other words, if it shows only rare
accesses, increasing the aggregation interval helps, and vice versa.  We
tested this theory on a few real-world workloads, and documented one of
the experience with an official DAMON monitoring intervals tuning
guideline.

Based on the guideline's theory, we design an automation of aggregation
tuning.  It defines the amount of interesting information as the ratio
of positive access check samples within the aggregation interval, or the
amount of blinking pixels on each snapshot.  Users are now asked to
answer the aimed value of the ratio.

The automation periodically measure the positive access samples ratio
and increase or decrease the aggregation if it is lower or higher than
the target value.  The amount of the change is proportion to the
distance between current value and the target value.

Discussion
==========

The modified question (aimed amount of heats in each snapshot) is easy
to answer by both the users and the kernel.  If users are interested in
finding more cold regions, the value should be lower, and vice versa.
If users have no idea, kernel can suggest about 20% positive access
samples ratio as a fair default value based on the Pareto principle.

Signed-off-by: SeongJae Park <sj@kernel.org>
---
 hkml_cv_bogus/hkml_cv_bogus_448v7nrp | 0
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 hkml_cv_bogus/hkml_cv_bogus_448v7nrp

diff --git a/hkml_cv_bogus/hkml_cv_bogus_448v7nrp b/hkml_cv_bogus/hkml_cv_bogus_448v7nrp
new file mode 100644
index 000000000000..e69de29bb2d1
-- 
2.39.5

