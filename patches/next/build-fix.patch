From: SeongJae Park <sj@kernel.org>
Date: Fri, 22 Nov 2024 14:22:52 -0800
Subject: [PATCH] build fix

Signed-off-by: SeongJae Park <sj@kernel.org>
---
 include/linux/damon.h | 18 ++++++++----------
 mm/damon/core.c       |  6 +++---
 2 files changed, 11 insertions(+), 13 deletions(-)

diff --git a/include/linux/damon.h b/include/linux/damon.h
index 30fbe73849ea..cff7e4e6e84c 100644
--- a/include/linux/damon.h
+++ b/include/linux/damon.h
@@ -363,16 +363,19 @@ struct damos_filter {
 	struct list_head list;
 };
 
-#ifdef DAMON_WIP
+struct damon_ctx;
+struct damos;
+
 struct damos_walk_control {
 	void *arg;
-	int (*prep_fn)(void *arg);
-	int (*walk_fn)(void *arg, struct damos *scheme);
+	int (*prep_fn)(void *arg, struct damon_ctx *ctx);
+	int (*walk_fn)(void *arg, struct damon_ctx *ctx,
+			struct damon_target *t, struct damon_region *r,
+			struct damos *s);
 /* private: internal use only */
 	struct completion completion;
 	bool canceled;
 };
-#endif
 
 /**
  * struct damos_access_pattern - Target access pattern of the given scheme.
@@ -459,10 +462,8 @@ struct damos {
 	 * @action
 	 */
 	unsigned long next_apply_sis;
-#ifdef DAMON_WIP
 	/* represents if ongoing DAMOS walk for this scheme is finished */
 	bool walk_completed;
-#endif
 /* public: */
 	struct damos_quota quota;
 	struct damos_watermarks wmarks;
@@ -490,8 +491,6 @@ enum damon_ops_id {
 	NR_DAMON_OPS,
 };
 
-struct damon_ctx;
-
 /**
  * struct damon_operations - Monitoring operations for given use cases.
  *
@@ -695,10 +694,8 @@ struct damon_ctx {
 	struct damon_call_control *call_control;
 	struct mutex call_control_lock;
 
-#ifdef DAMON_WIP
 	struct damos_walk_control *walk_control;
 	struct mutex walk_control_lock;
-#endif
 
 /* public: */
 	struct task_struct *kdamond;
@@ -848,6 +845,7 @@ int damon_start(struct damon_ctx **ctxs, int nr_ctxs, bool exclusive);
 int damon_stop(struct damon_ctx **ctxs, int nr_ctxs);
 
 int damon_call(struct damon_ctx *ctx, struct damon_call_control *control);
+int damos_walk(struct damon_ctx *ctx, struct damos_walk_control *control);
 
 int damon_set_region_biggest_system_ram_default(struct damon_target *t,
 				unsigned long *start, unsigned long *end);
diff --git a/mm/damon/core.c b/mm/damon/core.c
index be19cd6d68c5..84cad195a9f4 100644
--- a/mm/damon/core.c
+++ b/mm/damon/core.c
@@ -1191,7 +1191,7 @@ static bool damon_is_running(struct damon_ctx *ctx)
 
 	mutex_lock(&ctx->kdamond_lock);
 	running = ctx->kdamond != NULL;
-	mutex_unlock(&ctx->kdmond_lock);
+	mutex_unlock(&ctx->kdamond_lock);
 	return running;
 }
 
@@ -1447,7 +1447,7 @@ static void damos_walk_call_prep(struct damon_ctx *ctx)
 	mutex_unlock(&ctx->walk_control_lock);
 	if (!control)
 		return;
-	conrol->prep_fn(control->arg, ctx);
+	control->prep_fn(control->arg, ctx);
 }
 
 static void damos_walk_call_walk(struct damon_ctx *ctx, struct damon_target *t,
@@ -1460,7 +1460,7 @@ static void damos_walk_call_walk(struct damon_ctx *ctx, struct damon_target *t,
 	mutex_unlock(&ctx->walk_control_lock);
 	if (!control)
 		return;
-	conrol->walk_fn(control->arg, ctx);
+	control->walk_fn(control->arg, ctx, t, r, s);
 }
 
 static void damos_walk_call_complete(struct damon_ctx *ctx, struct damos *s)
-- 
2.39.5

