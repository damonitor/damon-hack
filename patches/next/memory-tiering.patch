From: SeongJae Park <sj@kernel.org>
Date: Wed, 5 Mar 2025 20:19:08 -0800
Subject: [PATCH] ==== memory tiering ====

mm/damon: let DAMON-based memory tiering self-tuned and just works

Utilizing DAMON for memory tiering usually requires manual tuning and
tedious controls.  Let it be able to self-tune hotness and coldness
thresholds for promotion and demotion, aiming specific utilization ratio
of upper tier node.  Further make it just works with minimum user
control such as boot time kernel commandline update or single command on
runtime, by introducing a DAMON kernel module that sets up and runs the
DAMON-based memory tiering instead of users.

Backgrounds
===========

Some systems equip tiered memory systems that exposes the tiers as NUMA
nodes.  A straightforward pages placement strategy for such systems is
placing access-hot and cold pages on upper and lower tiers,
reespectively.  For that, Linux kernel provides several features.

Page Faults and LRU
-------------------

One widely known way is using NUMA balancing in tiering mode and
reclaim-based demotion features.  NUMA balancing in tiering mode finds
hot pages using access check-purpose (a.k.a prot_none) page faults and
do promotion.  Reclaim-based demotion finds cold pages using the LRU
based reclaim logic and do demotion instead of discarding.

DAMON
-----

Yet another available solution is using DAMOS.  Users can ask DAMOS to
run two schemes that finds hot pages and cold pages based on DAMON's
monitoring results, and do promotion and demotion using migrate_hot and
migrate_cold DAMOS action.  The migrate_hot and migrate_cold DAMOS
actions prioritize hotter pages and colder pages on their own.  But,
users still need to specify how much hottest pages and coldest pages
should be promoted and demoted, and the minimum hotness and coldness
criteria.  The optimum values of those depend on characteristics of the
underlying hardware and the workload.  Hence it is often required to do
manual tuning of the DAMOS schemes on given workloads and systems.  When
the characteristics can dynamically changed, keeping DAMON-based memory
tiering always optimum becomes more challenging.  Worse yet, the schemes
may need to be designed again from the beginning for different tiers
hierarchies.  For example, schemes for systems having two memory tiers
should be different from those for systems having three memory tiers.

Self-Tuned DAMON-based Memory Tiering
=====================================

To solve such manual tuning problems, DAMOS provides feedback-driven
quotas auto-tuning.  Using the feature, we design DAMON-based memory
tiering for general multi-tiers memory system.

For each memory tier node, if it has a lower tier, run a DAMOS scheme
that demotes cold pages of the node, auto-tuning the aggressiveness
aiming a small amount of free space ratio (about 0.5 % could be
recommended by default) of the node.

For each memory tier node, if it has a upper tier, run a DAMOS scheme
that promotes hot pages of the node, auto-tuning the aggressiveness
aiming a high utilization ratio of the node.  The target ratio should be
set as slightly overlap with the demotion target free space ratio.  For
example, 99.7 % could be recommended by default.

Discussions
===========

Expected Behavior
-----------------

The system will let upper tier memory node accommodates as many hot data
as possible.  If total amount of the memory is less than the top tier
memory's promotion target utilization, entire data will be placed on the
top tier.  The nodes will always keep at least a headroom for future
promotions from lower tier.  Also, since the promotion and demotion
schemes for a single node has small overlaps, promotion of demotion will
not stop, and hence keep all data is placed on access hotness.

Ease of Use
-----------

Users still need to set the target utilization and free space ratio, but
it will be easier to set.  We argue 99.7 % utilization and 0.5 % free
space ratios are good starting point to try.  Users are also still
required to answer the minimum coldness and hotness thresholds.
Together with monitoring intervals auto-tuning, DAMON will always show
meaningful amount of hot and cold memory.  And DAMOS quota's
prioritization mechanism will make good decision as long as the source
information is that colorful.  Hence, users can very naively set the
minimum criterias.  We believe any access observation and no access
observation within last one aggregation interval is enough for minimum
hot and cold regions criterias.

The design can be applied to any number of tiers having any performance
characteristics.  Applying the system to different tiered memory system
will be straightforward.  Note that this assumes only single CPU NUMA
node case.  Because DAMON of today has no ability to get source of
access information, applying this on systems having multiple CPU NUMA
nodes can be complicated.  That's a future work.

Comparison To Page Faults and LRU-based Approaches
--------------------------------------------------

Evaluation
==========

In short, we found DAMON-based memory tiering improvement performance by
4.42 % and 12.73 % over default Linux kernel and page faults/reclaim based
memory tiering on specific setup.

Setup
-----

For the evaluation hardware, we use a machine equipping 255 GiB DRAM and
50 GiB CXL memory.

For the evaluation workload, we use a modified version of Taobench
benchmark, which represents an in-memory caching workload.  We set its
'memsize' parameter as 340, to ensure it uses more than DRAM memory.
Also set its 'warmup_time' and 'test_time' as 2,500 seconds and 1,440
seconds, because it reaches full memory usage after about 2,000 seconds.

We use a modified version of the workload because the benchmark has a
static access pattern.  It accesses only a part of its data frequently
from the beginning to the end.  Hot pages therefore continue being hot,
and cold pages continue being cold.  As a result, promotion mechanism
makes no benefit.  We therefore make the kernel to move hot pages in
DRAM node to CXL node once per minute, up to 10 GiB, and same for moving
cold pages from CXL node to DRAM node.  We use DAMOS to make this kernel
level change.  The intention is to simulate periodic access pattern
changes, and see if the memory tiering solution quickly places pages
correctly so that the workload gets benefit until next access pattern
change occurs.

Taobench exposes its resulting performance as a metric called score.
Higher score means better results.  We measure the score five times for
below configurations.

ones.
performance improvement

To make a simple and efficient implementation of such approach, SK hynix
developed DAMOS actions called 'migrate_hot' and 'migrate_cold'
it easy to use and efficient
cold pages information using DAMON and make user-space control for
promoting and demoting those using migrate_pages() like system calls.
SK hynix developed DAMOS actions
for the purposes, namely 'migrate_hot' and 'migrate_cold',
finding hot and cold pages from the beginning.  From Linux v6.11,
kkkkkkkk  Users
can do promotion and demotion via migrate_page()h

DAMON can also find hot and cold pages, and hence was being used for
memory tiering by researcheres

Results
-------

    Config         Score   Stdev   (%)     Normalized
    Baseline       1.6165  0.0319  1.9764  1.0000
    Numab_tiering  1.4976  0.0452  3.0209  0.9264
    DAMON_tiering  1.6881  0.0249  1.4767  1.0443

When number '2' is written

Page faults and LRU
-------------------

The first way is

On some system configurations such as ones using CXL.mem protocol,
so-called tiered memory system can be configure.

Systems can be configured with multiple characterisctics of memory
deivces

On some NUMA systems,  memory of different NUMA nodes can have very different
characteristicshaving systems running with memory devices having
different characteristics is available today.  One example is CXL-based
memory system.

Heteroneneous memory systems including CXL-based ones
are available today.

Promotion and Demotion
-------------------

NUMA Balancing-based Memory Tiering
-----------------------------------

Pros: easy to use
Cons: page faults overhead, synchrnous migration overhead, statically
set thresholds

DAMON-based Manually-Tuned Memory Tiering
-----------------------------------------

Pros: minimum overhead, asynchronous migration
Cons: statically set thresholds

DAMOS Quota Goal Metrics for Auot-tuned Memory Tiering
======================================================

Evaluation
==========

Future Plans
============

Background

Patch series "DAMON based tiered memory management for CXL memory"
starting with commit a00ce85af2a1 ("mm: make alloc_demote_folio
externally invokable for migration") added migrate_{hot,cold} DAMOS
actions.

Patch sereis "mm/damon: let DAMOS feeds and tame/auto-tune itself"
starting with commit 78f2f60377ee ("mm/damon/core: set damos_quota->esz
as public field and document") allowed self-tuning DAMOS.

RFC idea for DAMOS-based tiered memory management:
https://lore.kernel.org/all/20231112195602.61525-1-sj@kernel.org/

Evaluation

Signed-off-by: SeongJae Park <sj@kernel.org>
---
 hkml_cv_bogus/hkml_cv_bogus_gpnk7cul | 0
 1 file changed, 0 insertions(+), 0 deletions(-)
 create mode 100644 hkml_cv_bogus/hkml_cv_bogus_gpnk7cul

diff --git a/hkml_cv_bogus/hkml_cv_bogus_gpnk7cul b/hkml_cv_bogus/hkml_cv_bogus_gpnk7cul
new file mode 100644
index 000000000000..e69de29bb2d1
-- 
2.39.5

