From: SeongJae Park <sj@kernel.org>
Date: Wed, 20 Nov 2024 20:05:02 -0800
Subject: [PATCH] mm/damon/core: add more work-in-progress

Signed-off-by: SeongJae Park <sj@kernel.org>
---
 mm/damon/core.c | 44 +++++++++++++++++++++++++++++++++++++++++---
 1 file changed, 41 insertions(+), 3 deletions(-)

diff --git a/mm/damon/core.c b/mm/damon/core.c
index be9dc96f89c7..1d61650c820c 100644
--- a/mm/damon/core.c
+++ b/mm/damon/core.c
@@ -534,6 +534,9 @@ struct damon_ctx *damon_new_ctx(void)
 
 	mutex_init(&ctx->kdamond_lock);
 	mutex_init(&ctx->call_request_lock);
+#ifdef DAMON_WIP
+	mutex_init(&ctx->walk_control_lock);
+#endif
 
 	ctx->attrs.min_nr_regions = 10;
 	ctx->attrs.max_nr_regions = 1000;
@@ -1421,23 +1424,58 @@ static bool damos_filter_out(struct damon_ctx *ctx, struct damon_target *t,
 }
 
 #ifdef DAMON_WIP
+static void damos_do_walk_prep(struct damon_ctx *ctx)
+{
+	struct damos_walk_control *control;
+
+	mutex_lock(&ctx->walk_control_lock);
+	control = ctx->walk_control;
+	if (!control) {
+		mutex_unlock(&ctx->walk_control_lock);
+		return;
+	}
+	conrol->prep_fn(control->arg, ctx);
+	mutex_unlock(&ctx->walk_control_lock);
+}
+
 static void damos_do_walk(struct damon_ctx *ctx, struct damon_target *t,
 		struct damon_region *r, struct damos *s)
 {
+	struct damos_walk_control *control;
 
+	mutex_lock(&ctx->walk_control_lock);
+	control = ctx->walk_control;
+	if (!control) {
+		mutex_unlock(&ctx->walk_control_lock);
+		return;
+	}
+	conrol->walk_fn(control->arg, ctx);
+	mutex_unlock(&ctx->walk_control_lock);
 }
 
 static void damos_do_walk_complete(struct damon_ctx *ctx, struct damos *s)
 {
 	struct damos *siter;
+	struct damos_walk_control *control;
+
+	mutex_lock(&ctx->walk_control_lock);
+	control = ctx->walk_control;
+	if (!control) {
+		mutex_unlock(&ctx->walk_control_lock);
+		return;
+	}
 
 	s->walk_completed = true;
 	/* if all schemes completed, signal completion to walker */
 	damon_for_each_scheme(siter, ctx) {
-		if (!siter->walk_completed)
+		if (!siter->walk_completed) {
+			mutex_unlock(&ctx->walk_control_lock);
 			return;
+		}
 	}
-	/* complete walk_control->completion */
+	complete(&control->completion);
+	ctx->walk_control = NULL;
+	mutex_unlock(&ctx->walk_control_lock);
 }
 #endif
 
@@ -1767,7 +1805,7 @@ static void kdamond_apply_schemes(struct damon_ctx *c)
 
 		has_schemes_to_apply = true;
 #ifdef DAMON_WIP
-		/* call prep_fn */
+		damos_do_walk_prep(c);
 #endif
 
 		damos_adjust_quota(c, s);
-- 
2.39.5

