From: SeongJae Park <sj@kernel.org>
Date: Sat, 26 Jul 2025 11:05:57 -0700
Subject: [PATCH] mm/damon/core: set max_nr_accesses accordingly, for reported
 ones

Signed-off-by: SeongJae Park <sj@kernel.org>
---
 mm/damon/core.c | 26 ++++++++++++++++----------
 1 file changed, 16 insertions(+), 10 deletions(-)

diff --git a/mm/damon/core.c b/mm/damon/core.c
index beda0ced4cef..4a0dec3aaea6 100644
--- a/mm/damon/core.c
+++ b/mm/damon/core.c
@@ -2560,11 +2560,13 @@ static void kdamond_init_ctx(struct damon_ctx *ctx)
 	}
 }
 
-static void kdamond_apply_access_report(struct damon_access_report *report,
-		struct damon_target *t, struct damon_ctx *ctx)
+static unsigned int kdamond_apply_access_report(
+		struct damon_access_report *report, struct damon_target *t,
+		struct damon_ctx *ctx)
 {
 	struct damon_region *r;
 	int i;
+	unsigned int max_nr_accesses = 0;
 
 	if (ctx->ops.eligible_report && !ctx->ops.eligible_report(report, t))
 		return;
@@ -2578,14 +2580,17 @@ static void kdamond_apply_access_report(struct damon_access_report *report,
 		/* TODO: optimize out loop */
 		for (i = 0; i < report->nr_accesses; i++)
 			damon_update_region_access_rate(r, true, &ctx->attrs);
+		max_nr_accesses = max(max_nr_accesses, r->nr_accesses);
 	}
+	return max_nr_accesses;
 }
 
-static void kdamond_check_reported_accesses(struct damon_ctx *ctx)
+static unsigned int kdamond_check_reported_accesses(struct damon_ctx *ctx)
 {
 	int i;
 	struct damon_access_report *report;
 	struct damon_target *t;
+	unsigned int max_nr_accesses = 0, max_nr_accesses_target;
 
 	mutex_lock(&damon_access_reports_lock);
 	for (i = 0; i < damon_access_reports_len; i++) {
@@ -2597,10 +2602,15 @@ static void kdamond_check_reported_accesses(struct damon_ctx *ctx)
 			continue;
 		if (report->pid && !damon_target_has_pid(ctx))
 			continue;
-		damon_for_each_target(t, ctx)
-			kdamond_apply_access_report(report, t, ctx);
+		damon_for_each_target(t, ctx) {
+			max_nr_accesses_target = kdamond_apply_access_report(
+					report, t, ctx);
+			max_nr_accesses = max(max_nr_accesses,
+					max_nr_accesses_target);
+		}
 	}
 	mutex_unlock(&damon_access_reports_lock);
+	return max_nr_accesses;
 }
 
 /*
@@ -2648,11 +2658,7 @@ static int kdamond_fn(void *data)
 		kdamond_usleep(sample_interval);
 		ctx->passed_sample_intervals++;
 
-		/*
-		 * TODO: set max_nr_accesses from
-		 * kdamond_check_reported_accesses()
-		 */
-		kdamond_check_reported_accesses(ctx);
+		max_nr_accesses = kdamond_check_reported_accesses(ctx);
 		if (ctx->ops.check_accesses)
 			max_nr_accesses = ctx->ops.check_accesses(ctx);
 
-- 
2.39.5

