From: SeongJae Park <sj@kernel.org>
Date: Sun, 16 Feb 2025 13:32:14 -0800
Subject: [PATCH] mm/damon: fixup reject_by_default behaviors

Signed-off-by: SeongJae Park <sj@kernel.org>
---
 include/linux/damon.h |  4 +++-
 mm/damon/core.c       | 33 +++++++++++++++++++--------------
 mm/damon/paddr.c      |  2 +-
 3 files changed, 23 insertions(+), 16 deletions(-)

diff --git a/include/linux/damon.h b/include/linux/damon.h
index 62f13df049db..b7b77f095d45 100644
--- a/include/linux/damon.h
+++ b/include/linux/damon.h
@@ -494,7 +494,9 @@ struct damos {
 	unsigned long next_apply_sis;
 	/* informs if ongoing DAMOS walk for this scheme is finished */
 	bool walk_completed;
-	bool reject_by_default;
+	/* whether to reject core/ops filters umatched regions */
+	bool core_filters_default_reject;
+	bool ops_filters_default_reject;
 /* public: */
 	struct damos_quota quota;
 	struct damos_watermarks wmarks;
diff --git a/mm/damon/core.c b/mm/damon/core.c
index 92e40a0d1aca..d7d85a03a986 100644
--- a/mm/damon/core.c
+++ b/mm/damon/core.c
@@ -890,22 +890,27 @@ static int damos_commit_ops_filters(struct damos *dst, struct damos *src)
 	return 0;
 }
 
-static void damos_set_reject_by_default(struct damos *s)
+/**
+ * damos_filters_default_reject() - decide whether to reject memory that didn't
+ *				    match with any given filter.
+ * @filters:	Given DAMOS filters of a group.
+ */
+static bool damos_filters_default_reject(struct list_head *filters)
 {
 	struct damos_filter *last_filter;
 
-	if (list_empty(&s->filters) && list_empty(&s->ops_filters)) {
-		s->reject_by_default = false;
-		return;
-	}
+	if (list_empty(filters))
+		return false;
+	last_filter = list_last_entry(filters, struct damos_filter, list);
+	return last_filter->allow;
+}
 
-	if (!list_empty(&s->ops_filters))
-		last_filter = list_last_entry(
-				&s->ops_filters, struct damos_filter, list);
-	else
-		last_filter = list_last_entry(
-				&s->filters, struct damos_filter, list);
-	s->reject_by_default = last_filter->allow;
+static void damos_set_filters_default_reject(struct damos *s)
+{
+	s->core_filters_default_reject =
+		damos_filters_default_reject(&s->filters);
+	s->ops_filters_default_reject =
+		damos_filters_default_reject(&s->ops_filters);
 }
 
 static int damos_commit_filters(struct damos *dst, struct damos *src)
@@ -918,7 +923,7 @@ static int damos_commit_filters(struct damos *dst, struct damos *src)
 	err = damos_commit_ops_filters(dst, src);
 	if (err)
 		return err;
-	damos_set_reject_by_default(dst);
+	damos_set_filters_default_reject(dst);
 	return 0;
 }
 
@@ -1592,7 +1597,7 @@ static bool damos_filter_out(struct damon_ctx *ctx, struct damon_target *t,
 		if (damos_filter_match(ctx, t, r, filter))
 			return !filter->allow;
 	}
-	return s->reject_by_default;
+	return s->core_filters_default_reject;
 }
 
 /*
diff --git a/mm/damon/paddr.c b/mm/damon/paddr.c
index 2af5c07fe2e4..595b893c416e 100644
--- a/mm/damon/paddr.c
+++ b/mm/damon/paddr.c
@@ -254,7 +254,7 @@ static bool damos_pa_filter_out(struct damos *scheme, struct folio *folio)
 		if (damos_pa_filter_match(filter, folio))
 			return !filter->allow;
 	}
-	return scheme->reject_by_default;
+	return scheme->ops_filters_default_reject;
 }
 
 static bool damon_pa_invalid_damos_folio(struct folio *folio, struct damos *s)
-- 
2.39.5

