From: SeongJae Park <sj@kernel.org>
Date: Mon, 20 Jan 2025 14:11:10 -0800
Subject: [PATCH] mm/damon: introduce damon_attrs auto-tuning fields

Signed-off-by: SeongJae Park <sj@kernel.org>
---
 include/linux/damon.h | 26 ++++++++++++++++++++++++++
 1 file changed, 26 insertions(+)

diff --git a/include/linux/damon.h b/include/linux/damon.h
index 47bdd90a4d75..2192fde27665 100644
--- a/include/linux/damon.h
+++ b/include/linux/damon.h
@@ -670,6 +670,9 @@ struct damon_call_control {
  *				regions.
  * @max_nr_regions:		The maximum number of adaptive monitoring
  *				regions.
+ * @target_access_samples_bp:	Intervals tuning target access samples ratio.
+ * @intervals_tune_interval:	Intervals tuning time interval in micorseconds.
+ * @max_aggr_interval:		Maximum aggregation interval after tuning.
  *
  * For each @sample_interval, DAMON checks whether each region is accessed or
  * not during the last @sample_interval.  If such access is found, DAMON
@@ -680,6 +683,16 @@ struct damon_call_control {
  * and applies the changes for each @ops_update_interval.  All time intervals
  * are in micro-seconds.  Please refer to &struct damon_operations and &struct
  * damon_callback for more detail.
+ *
+ * If @target_access_samples_bp is set, DAMON automatically tune @aggr_interval
+ * and @sample_interval aiming the ratio of positive access check samples to
+ * total samples within @intervals_tune_interval be same to
+ * @target_access_samples_bp.  The user-set @sampling_interval and
+ * @aggr_interval work as minimum values of the after-tune parameters.  User
+ * can set the maximum aggregation interval after the tuning via
+ * @max_aggr_interval.  The tuning logic keeps the ratio between
+ * @sampling_interval and @aggr_interval, so max sampling interval can also be
+ * set using @max_aggr_interval.
  */
 struct damon_attrs {
 	unsigned long sample_interval;
@@ -687,6 +700,14 @@ struct damon_attrs {
 	unsigned long ops_update_interval;
 	unsigned long min_nr_regions;
 	unsigned long max_nr_regions;
+
+	unsigned int target_access_samples_bp;
+	unsigned long intervals_tune_interval;
+	unsigned long max_aggr_interval;
+
+/* private: internal use only */
+	unsigned long access_samples;
+	unsigned long min_aggr_interval;
 };
 
 /**
@@ -735,6 +756,11 @@ struct damon_ctx {
 	 * update
 	 */
 	unsigned long next_ops_update_sis;
+	/*
+	 * number of sample intervals that should be passed before next
+	 * intervals tuning
+	 */
+	unsigned long next_intervals_tune_sis;
 	/* for waiting until the execution of the kdamond_fn is started */
 	struct completion kdamond_started;
 	/* for scheme quotas prioritization */
-- 
2.39.5

