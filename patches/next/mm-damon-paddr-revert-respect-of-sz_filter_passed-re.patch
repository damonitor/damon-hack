From: SeongJae Park <sj@kernel.org>
Date: Mon, 16 Dec 2024 19:54:45 -0800
Subject: [PATCH] mm/damon/paddr: revert respect of sz_filter_passed request

Signed-off-by: SeongJae Park <sj@kernel.org>
---
 mm/damon/paddr.c | 42 ++++++++++++++----------------------------
 1 file changed, 14 insertions(+), 28 deletions(-)

diff --git a/mm/damon/paddr.c b/mm/damon/paddr.c
index 10e92a8af2c7..d3e23fd6b001 100644
--- a/mm/damon/paddr.c
+++ b/mm/damon/paddr.c
@@ -246,8 +246,7 @@ static bool damos_pa_filter_out(struct damos *scheme, struct folio *folio)
 	return false;
 }
 
-static unsigned long damon_pa_pageout(struct damon_region *r, struct damos *s,
-		unsigned long *sz_filter_passed)
+static unsigned long damon_pa_pageout(struct damon_region *r, struct damos *s)
 {
 	unsigned long addr, applied;
 	LIST_HEAD(folio_list);
@@ -276,8 +275,6 @@ static unsigned long damon_pa_pageout(struct damon_region *r, struct damos *s,
 
 		if (damos_pa_filter_out(s, folio))
 			goto put_folio;
-		else
-			*sz_filter_passed += folio_size(folio);
 
 		folio_clear_referenced(folio);
 		folio_test_clear_young(folio);
@@ -298,8 +295,7 @@ static unsigned long damon_pa_pageout(struct damon_region *r, struct damos *s,
 }
 
 static inline unsigned long damon_pa_mark_accessed_or_deactivate(
-		struct damon_region *r, struct damos *s, bool mark_accessed,
-		unsigned long *sz_filter_passed)
+		struct damon_region *r, struct damos *s, bool mark_accessed)
 {
 	unsigned long addr, applied = 0;
 
@@ -311,8 +307,6 @@ static inline unsigned long damon_pa_mark_accessed_or_deactivate(
 
 		if (damos_pa_filter_out(s, folio))
 			goto put_folio;
-		else
-			*sz_filter_passed += folio_size(folio);
 
 		if (mark_accessed)
 			folio_mark_accessed(folio);
@@ -326,17 +320,15 @@ static inline unsigned long damon_pa_mark_accessed_or_deactivate(
 }
 
 static unsigned long damon_pa_mark_accessed(struct damon_region *r,
-	struct damos *s, unsigned long *sz_filter_passed)
+	struct damos *s)
 {
-	return damon_pa_mark_accessed_or_deactivate(r, s, true,
-			sz_filter_passed);
+	return damon_pa_mark_accessed_or_deactivate(r, s, true);
 }
 
 static unsigned long damon_pa_deactivate_pages(struct damon_region *r,
-	struct damos *s, unsigned long *sz_filter_passed)
+	struct damos *s)
 {
-	return damon_pa_mark_accessed_or_deactivate(r, s, false,
-			sz_filter_passed);
+	return damon_pa_mark_accessed_or_deactivate(r, s, false);
 }
 
 static unsigned int __damon_pa_migrate_folio_list(
@@ -460,8 +452,7 @@ static unsigned long damon_pa_migrate_pages(struct list_head *folio_list,
 	return nr_migrated;
 }
 
-static unsigned long damon_pa_migrate(struct damon_region *r, struct damos *s,
-		unsigned long *sz_filter_passed)
+static unsigned long damon_pa_migrate(struct damon_region *r, struct damos *s)
 {
 	unsigned long addr, applied;
 	LIST_HEAD(folio_list);
@@ -474,8 +465,6 @@ static unsigned long damon_pa_migrate(struct damon_region *r, struct damos *s,
 
 		if (damos_pa_filter_out(s, folio))
 			goto put_folio;
-		else
-			*sz_filter_passed += folio_size(folio);
 
 		if (!folio_isolate_lru(folio))
 			goto put_folio;
@@ -554,8 +543,7 @@ static int damon_pa_alloc(unsigned long pfn, struct damos *scheme)
 
 /* Preempt or yield memory regions from system */
 static unsigned long damon_pa_alloc_or_free(
-		struct damon_region *r, struct damos *s, bool alloc,
-		unsigned long *sz_filter_passed)
+		struct damon_region *r, struct damos *s, bool alloc)
 {
 	unsigned long pfn;
 	unsigned long applied = 0;
@@ -582,21 +570,19 @@ static unsigned long damon_pa_apply_scheme(struct damon_ctx *ctx,
 {
 	switch (scheme->action) {
 	case DAMOS_PAGEOUT:
-		return damon_pa_pageout(r, scheme, sz_filter_passed);
+		return damon_pa_pageout(r, scheme);
 	case DAMOS_LRU_PRIO:
-		return damon_pa_mark_accessed(r, scheme, sz_filter_passed);
+		return damon_pa_mark_accessed(r, scheme);
 	case DAMOS_LRU_DEPRIO:
-		return damon_pa_deactivate_pages(r, scheme, sz_filter_passed);
+		return damon_pa_deactivate_pages(r, scheme);
 	case DAMOS_MIGRATE_HOT:
 	case DAMOS_MIGRATE_COLD:
-		return damon_pa_migrate(r, scheme, sz_filter_passed);
+		return damon_pa_migrate(r, scheme);
 #ifdef CONFIG_ACMA
 	case DAMOS_ALLOC:
-		return damon_pa_alloc_or_free(r, scheme, true,
-				sz_filter_passed);
+		return damon_pa_alloc_or_free(r, scheme, true);
 	case DAMOS_FREE:
-		return damon_pa_alloc_or_free(r, scheme, false,
-				sz_filter_passed);
+		return damon_pa_alloc_or_free(r, scheme, false);
 #endif
 	case DAMOS_STAT:
 		break;
-- 
2.39.5

