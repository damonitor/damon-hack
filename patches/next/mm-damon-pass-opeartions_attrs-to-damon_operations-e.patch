From: SeongJae Park <sj@kernel.org>
Date: Sat, 2 Aug 2025 13:16:37 -0700
Subject: [PATCH] mm/damon: pass opeartions_attrs to
 damon_operations->eligible_report

Signed-off-by: SeongJae Park <sj@kernel.org>
---
 include/linux/damon.h | 30 ++++++++++++++++--------------
 mm/damon/core.c       |  3 ++-
 mm/damon/vaddr.c      |  3 ++-
 3 files changed, 20 insertions(+), 16 deletions(-)

diff --git a/include/linux/damon.h b/include/linux/damon.h
index f89b96a93098..63d40241c86e 100644
--- a/include/linux/damon.h
+++ b/include/linux/damon.h
@@ -587,6 +587,18 @@ enum damon_ops_id {
 	NR_DAMON_OPS,
 };
 
+/**
+ *
+ * struct damon_operations_attrs - Monitoring operations control attributes.
+ *
+ * @use_reports:	Whether to use damon_report_access()-ed information.
+ * @write_only:		Ignore none-write accesses.
+ */
+struct damon_operations_attrs {
+	bool use_reports;
+	bool write_only;
+};
+
 /**
  * struct damon_operations - Monitoring operations for given use cases.
  *
@@ -624,7 +636,8 @@ enum damon_ops_id {
  * It should also return max number of observed accesses that made as a result
  * of its update.  The value will be used for regions adjustment threshold.
  * @eligible_report should check if the given access report is eligible to be
- * used by this operations set for the given target.
+ * used by this operations set for the given target and operations set
+ * attributes.
  * @get_scheme_score should return the priority score of a region for a scheme
  * as an integer in [0, &DAMOS_MAX_SCORE].
  * @apply_scheme is called from @kdamond when a region for user provided
@@ -644,7 +657,8 @@ struct damon_operations {
 	void (*prepare_access_checks)(struct damon_ctx *context);
 	unsigned int (*check_accesses)(struct damon_ctx *context);
 	bool (*eligible_report)(struct damon_access_report *report,
-			struct damon_target *t);
+			struct damon_target *t,
+			struct damon_operations_attrs *ops_attrs);
 	int (*get_scheme_score)(struct damon_ctx *context,
 			struct damon_target *t, struct damon_region *r,
 			struct damos *scheme);
@@ -656,18 +670,6 @@ struct damon_operations {
 	void (*cleanup)(struct damon_ctx *context);
 };
 
-/**
- *
- * struct damon_operations_attrs - Monitoring operations control attributes.
- *
- * @use_reports:	Whether to use damon_report_access()-ed information.
- * @write_only:		Ignore none-write accesses.
- */
-struct damon_operations_attrs {
-	bool use_reports;
-	bool write_only;
-};
-
 /*
  * struct damon_call_control - Control damon_call().
  *
diff --git a/mm/damon/core.c b/mm/damon/core.c
index 11ace6820e1d..a2af6298aac7 100644
--- a/mm/damon/core.c
+++ b/mm/damon/core.c
@@ -2599,7 +2599,8 @@ static void kdamond_apply_access_report(struct damon_access_report *report,
 {
 	struct damon_region *r;
 
-	if (ctx->ops.eligible_report && !ctx->ops.eligible_report(report, t))
+	if (ctx->ops.eligible_report && !ctx->ops.eligible_report(report, t,
+				&ctx->ops_attrs))
 		return;
 
 	/* todo: make search faster, e.g., binary search? */
diff --git a/mm/damon/vaddr.c b/mm/damon/vaddr.c
index 885a674176da..fab045edd664 100644
--- a/mm/damon/vaddr.c
+++ b/mm/damon/vaddr.c
@@ -793,7 +793,8 @@ static int damos_va_migrate_pte_entry(pte_t *pte, unsigned long addr,
 }
 
 static bool damon_va_eligible_report(struct damon_access_report *report,
-		struct damon_target *t)
+		struct damon_target *t,
+		struct damon_operations_attrs *ops_attrs)
 {
 	return report->pid == t->pid;
 }
-- 
2.39.5

