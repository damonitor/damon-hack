From: SeongJae Park <sj@kernel.org>
Date: Sat, 10 May 2025 13:39:47 -0700
Subject: [PATCH] mm/damon/stat: implement estimated memory bandwidth

Signed-off-by: SeongJae Park <sj@kernel.org>
---
 mm/damon/stat.c | 20 ++++++++++++++++++++
 1 file changed, 20 insertions(+)

diff --git a/mm/damon/stat.c b/mm/damon/stat.c
index 4a856e3d7b78..5cc7efdc9127 100644
--- a/mm/damon/stat.c
+++ b/mm/damon/stat.c
@@ -22,8 +22,27 @@ static bool enable __read_mostly;
 module_param_cb(enable, &enable_param_ops, &enable, 0600);
 MODULE_PARM_DESC(enable, "Enable of disable DAMON_STAT");
 
+static unsigned long estimated_memory_bandwidth __read_mostly = 0;
+module_param(estimated_memory_bandwidth, ulong, 0400);
+
 static struct damon_ctx *damon_stat_context;
 
+static int damon_stat_after_aggregation(struct damon_ctx *c)
+{
+	struct damon_target *t;
+	struct damon_region *r;
+	unsigned long access_bytes = 0;
+
+	damon_for_each_target(t, c) {
+		damon_for_each_region(r, t)
+			access_bytes += (r->ar.end - r->ar.start) *
+				r->nr_accesses;
+	}
+	estimated_memory_bandwidth = access_bytes * USEC_PER_MSEC *
+		MSEC_PER_SEC / c->attrs.aggr_interval;
+	return 0;
+}
+
 static struct damon_ctx *damon_stat_build_ctx(void)
 {
 	struct damon_ctx *ctx;
@@ -50,6 +69,7 @@ static struct damon_ctx *damon_stat_build_ctx(void)
 	damon_add_target(ctx, target);
 	if (damon_set_region_biggest_system_ram_default(target, &start, &end))
 		goto free_out;
+	ctx->callback.after_aggregation = damon_stat_after_aggregation;
 	return ctx;
 free_out:
 	damon_destroy_ctx(ctx);
-- 
2.39.5

