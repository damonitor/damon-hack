From: SeongJae Park <sj@kernel.org>
Date: Fri, 17 Oct 2025 11:38:17 -0700
Subject: [PATCH] mm/damon/tets/core-kunit: cleanup quota goal commit test

Signed-off-by: SeongJae Park <sj@kernel.org>
---
 mm/damon/tests/core-kunit.h | 141 ++++++++++++++++--------------------
 1 file changed, 62 insertions(+), 79 deletions(-)

diff --git a/mm/damon/tests/core-kunit.h b/mm/damon/tests/core-kunit.h
index 3776b4ee899a..2fbc27d74b31 100644
--- a/mm/damon/tests/core-kunit.h
+++ b/mm/damon/tests/core-kunit.h
@@ -437,104 +437,87 @@ static void damos_test_commit_filter(struct kunit *test)
 	damos_destroy_filter(dst_filter);
 }
 
-static void damos_test_commit_quota_goal_ensure_committed(struct kunit *test,
-		struct damos_quota_goal *dst, struct damos_quota_goal *src,
-		u64 last_psi_total)
+static void damos_test_commit_quota_goal_for(struct kunit *test,
+		struct damos_quota_goal *dst,
+		struct damos_quota_goal *src)
 {
-	struct damos_quota_goal dst_cp, src_cp;
+	u64 dst_last_psi_total = 0;
+
+	if (dst->metric == DAMOS_QUOTA_SOME_MEM_PSI_US)
+		dst_last_psi_total = dst->last_psi_total;
+	damos_commit_quota_goal(dst, src);
 
 	KUNIT_EXPECT_EQ(test, dst->metric, src->metric);
 	KUNIT_EXPECT_EQ(test, dst->target_value, src->target_value);
 	if (src->metric == DAMOS_QUOTA_USER_INPUT)
 		KUNIT_EXPECT_EQ(test, dst->current_value, src->current_value);
-	/* last_psi_total is not updated */
-	if (last_psi_total)
-		KUNIT_EXPECT_EQ(test, dst->last_psi_total, last_psi_total);
+	if (dst_last_psi_total && src->metric == DAMOS_QUOTA_SOME_MEM_PSI_US)
+		KUNIT_EXPECT_EQ(test, dst->last_psi_total, dst_last_psi_total);
 	switch (dst->metric) {
 	case DAMOS_QUOTA_NODE_MEM_USED_BP:
 	case DAMOS_QUOTA_NODE_MEM_FREE_BP:
 		KUNIT_EXPECT_EQ(test, dst->nid, src->nid);
 		break;
+	case DAMOS_QUOTA_NODE_MEMCG_USED_BP:
+	case DAMOS_QUOTA_NODE_MEMCG_FREE_BP:
+		KUNIT_EXPECT_EQ(test, dst->nid, src->nid);
+		KUNIT_EXPECT_EQ(test, dst->memcg_id, src->memcg_id);
+		break;
 	default:
 		break;
 	}
-
-	/*
-	 * Adding parameter fields without updating relevant commit code is
-	 * common.  Comapre entire bits except known unupdated fields, to fail
-	 * on such cases.
-	 */
-	memcpy(&dst_cp, dst, sizeof(dst_cp));
-	memcpy(&src_cp, src, sizeof(src_cp));
-	dst_cp.list = src_cp.list;
-	dst_cp.current_value = src_cp.current_value;
-	dst_cp.last_psi_total = src_cp.last_psi_total;
-	dst_cp.nid = src_cp.nid;
-	dst_cp.memcg_id = src_cp.memcg_id;
-
-	KUNIT_EXPECT_EQ(test, memcmp(&dst_cp, &src_cp, sizeof(dst_cp)), 0);
-}
-
-static int damos_test_commit_quota_goal_for(struct kunit *test,
-		struct damos_quota_goal *dst,
-		enum damos_quota_goal_metric src_metric,
-		unsigned long src_target_val, unsigned long src_current_val,
-		int src_nid)
-{
-	struct damos_quota_goal *src;
-	u64 dst_last_psi_total;
-
-	src = damos_new_quota_goal(src_metric, src_target_val);
-	src->current_value = src_current_val;
-	if (src_nid)
-		src->nid = src_nid;
-
-	if (dst->metric == DAMOS_QUOTA_SOME_MEM_PSI_US)
-		dst_last_psi_total = dst->last_psi_total;
-	else
-		dst_last_psi_total = 0;
-	damos_commit_quota_goal(dst, src);
-	damos_test_commit_quota_goal_ensure_committed(test, dst, src,
-			dst_last_psi_total);
-	damos_destroy_quota_goal(src);
-	return 0;
 }
 
 static void damos_test_commit_quota_goal(struct kunit *test)
 {
-	struct damos_quota_goal *dst;
-
-	dst = damos_new_quota_goal(DAMOS_QUOTA_SOME_MEM_PSI_US, 1000);
-	if (!dst)
-		kunit_skip(test, "dst_gaol alloc fail\n");
-	dst->current_value = 123;
-	dst->last_psi_total = 456;
-	if (damos_test_commit_quota_goal_for(test, dst, DAMOS_QUOTA_USER_INPUT,
-				789, 12, 0)) {
-		kfree(dst);
-		kunit_skip(test, "USER_INPUT test error\n");
-		return;
-	}
-	if (damos_test_commit_quota_goal_for(test, dst,
-				DAMOS_QUOTA_NODE_MEM_FREE_BP, 345, 678, 9)) {
-		kfree(dst);
-		kunit_skip(test, "NODE_MEM_FREE_BP test error\n");
-		return;
-	}
-	if (damos_test_commit_quota_goal_for(test, dst,
-				DAMOS_QUOTA_NODE_MEM_USED_BP, 12, 345, 6)) {
-		kfree(dst);
-		kunit_skip(test, "NODE_MEM_USED_BP test error\n");
-		return;
-	}
-	if (damos_test_commit_quota_goal_for(test, dst,
-				DAMOS_QUOTA_USER_INPUT, 789, 12, 0)) {
-		kfree(dst);
-		kunit_skip(test, "USER_INPUT test error\n");
-		return;
-	}
+	struct damos_quota_goal dst = {
+		.metric = DAMOS_QUOTA_SOME_MEM_PSI_US,
+		.target_value = 1000,
+		.current_value = 123,
+		.last_psi_total = 456,
+	};
 
-	damos_destroy_quota_goal(dst);
+	damos_test_commit_quota_goal_for(test, &dst,
+			&(struct damos_quota_goal){
+			.metric = DAMOS_QUOTA_USER_INPUT,
+			.target_value = 789,
+			.current_value = 12});
+	damos_test_commit_quota_goal_for(test, &dst,
+			&(struct damos_quota_goal){
+			.metric = DAMOS_QUOTA_NODE_MEM_FREE_BP,
+			.target_value = 345,
+			.current_value = 678,
+			.nid = 9,
+			});
+	damos_test_commit_quota_goal_for(test, &dst,
+			&(struct damos_quota_goal){
+			.metric = DAMOS_QUOTA_NODE_MEM_USED_BP,
+			.target_value = 12,
+			.current_value = 345,
+			.nid = 6,
+			});
+	damos_test_commit_quota_goal_for(test, &dst,
+			&(struct damos_quota_goal){
+			.metric = DAMOS_QUOTA_NODE_MEMCG_USED_BP,
+			.target_value = 456,
+			.current_value = 567,
+			.nid = 6,
+			.memcg_id = 7,
+			});
+	damos_test_commit_quota_goal_for(test, &dst,
+			&(struct damos_quota_goal){
+			.metric = DAMOS_QUOTA_NODE_MEMCG_FREE_BP,
+			.target_value = 890,
+			.current_value = 901,
+			.nid = 10,
+			.memcg_id = 1,
+			});
+	damos_test_commit_quota_goal_for(test, &dst,
+			&(struct damos_quota_goal) {
+			.metric = DAMOS_QUOTA_USER_INPUT,
+			.target_value = 789,
+			.current_value = 12,
+			});
 }
 
 static void damos_test_commit_quota_goals(struct kunit *test)
-- 
2.47.3

